syntax = "proto3";

option java_package = "org.matsim.contrib.drt.optimizer.rebalancing.remoteBalancing.server";

package drtrl.server;

/*
  Message without content.
 */
message Empty {}

/*
  Information about one single zone.
 */
message Zone {

  /*
    unique id
   */
  string id = 1;

  /*
     x-coordinate of the centroid.
   */
  double centroidX = 2;
  /*
     y-coordinate of the centroid.
   */
  double centroidY = 3;

}

/*
  Specification of rebalancing problem.
 */
message RebalancingSpecification {

  /*
    rebalancing interval in seconds.
   */
  int32 interval = 1;

  /*
    simulation end time.
   */
  double endTime = 2;

  /*
    number of drt vehicles.
   */
  int32 fleetSize = 3;

  /*
    zone specification.
   */
  repeated Zone zones = 4;

  /*
    Number of iterations.
   */
  int32 iterations = 5;
}

/*
  Holding current simulation time.
 */
message SimulationTime {
  /*
    Simulation time.
  */
  int32 time = 1;

}

/*
  Information regarding one drt request.
 */
message DrtRequest {

  double submissionTime = 1;
  double departureTime = 2;
  double pickupTime = 3;
  double dropOffTime = 4;

}

/*
  Statistics for certain distribution.
 */
message Stats {
  double sum = 1;
  double mean = 2;
  double median = 3;
  double q95 = 4;
  double q5 = 5;
}

/*
  Instructions for the server on how to rebalance.
 */
message RebalancingInstructions {

  /*
    Time for which instructions are valid.
   */
  int32 currentTime = 1;

  /*
    Rebalance in one of the following ways.
   */
  // TODO: oneof is not working, seems to be a bug in grpc
  //oneof rebalance {
    /*
      Rebalance by using target values.
     */
    ZoneTargets zoneTargets = 2;
    /*
      Use min cost flow with alpha and beta parameter.
     */
    MinCostFlow minCostFlow = 3;
  //}

  /*
  Rebalance using zone targets.
 */
  message ZoneTargets {
    /*
     Target values in same order as zones.
    */
    repeated int32 vehicles = 1;
  }

  /*
    Rebalance using min cost flow.
   */
  message MinCostFlow {
    double alpha = 1;
    double beta = 2;
  }

}

/*
   Current state of the system.
 */
message RebalancingState {

  /*
    Current simulation time.
   */
  double simulationTime = 1;

  /*
    Number of rebalance vehicles within a zone.
   */
  map<string, int32> rebalancableVehiclesPerZone = 2;

  // TODO map string, int32 number of waiting passengers per zone

  /*
    Performed requests since last time step.
   */
  repeated DrtRequest performedRequest = 3;

  /*
    Rejected requests within last timestep.
   */
  repeated DrtRequest rejectedRequests = 4;

  /*
    Waiting time statistics within last timestep.
   */
  Stats waitingTime = 5;

  /*
    Travel time statis for performed requests.
   */
  Stats travelTime = 6;

  // TODO: fleet driven km

  /*
    Indicates end of simulation.
  */
  bool simulationEnded = 7;

}

/*
  Server running within MATSim and accepting rebalancing input.
 */
service RebalancingStrategy {

  /*
     Return the specification of the rebalancing problem.
   */
  rpc GetSpecification(Empty) returns (RebalancingSpecification) {}

  /*
    Wait for the state at specified time.
   */
  rpc GetCurrentState(SimulationTime) returns (RebalancingState) {}

  /*
    Perform the rebalancing and block until next time step.
   */
  rpc PerformRebalancing(RebalancingInstructions) returns (SimulationTime) {}

}